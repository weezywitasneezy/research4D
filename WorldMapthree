import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';

const WorldLayersVisualization = () => {
  const mountRef = useRef(null);

  useEffect(() => {
    // Scene setup
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87ceeb); // Sky blue background

    // Camera setup
    const camera = new THREE.PerspectiveCamera(
      45, 
      window.innerWidth / window.innerHeight, 
      0.1, 
      2000
    );
    camera.position.set(100, 100, 100);
    camera.lookAt(0, 0, 0);

    // Renderer setup
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    mountRef.current.appendChild(renderer.domElement);

    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(50, 100, 50);
    directionalLight.castShadow = true;
    scene.add(directionalLight);

    // Add orbit controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;

    // Create base plane (representing sea level)
    const baseGeometry = new THREE.PlaneGeometry(200, 200);
    const baseMaterial = new THREE.MeshLambertMaterial({ 
      color: 0x4682b4, // Steel blue for water
      side: THREE.DoubleSide,
      transparent: true,
      opacity: 0.8
    });
    const basePlane = new THREE.Mesh(baseGeometry, baseMaterial);
    basePlane.rotation.x = -Math.PI / 2;
    scene.add(basePlane);

    // Create the vertical layers
    
    // 1. Space Farms Layer (highest)
    const spaceFarmsGeometry = new THREE.TorusGeometry(85, 2, 16, 50);
    const spaceFarmsMaterial = new THREE.MeshLambertMaterial({ 
      color: 0xd3d3d3, // Light gray
      transparent: true,
      opacity: 0.7
    });
    const spaceFarms = new THREE.Mesh(spaceFarmsGeometry, spaceFarmsMaterial);
    spaceFarms.position.y = 80;
    spaceFarms.rotation.x = Math.PI / 2;
    scene.add(spaceFarms);

    // 2. Floating Cities Layer
    const createFloatingCity = (x, z, size, color) => {
      const cityGroup = new THREE.Group();
      
      // Base platform
      const baseGeom = new THREE.CylinderGeometry(size, size * 1.2, size * 0.3, 6);
      const baseMat = new THREE.MeshLambertMaterial({ color });
      const base = new THREE.Mesh(baseGeom, baseMat);
      cityGroup.add(base);
      
      // Buildings
      for (let i = 0; i < 5; i++) {
        const buildingHeight = size * (0.5 + Math.random() * 1.5);
        const buildingSize = size * 0.2;
        const buildingGeom = new THREE.BoxGeometry(buildingSize, buildingHeight, buildingSize);
        const buildingMat = new THREE.MeshLambertMaterial({ 
          color: new THREE.Color(color).multiplyScalar(0.8)
        });
        const building = new THREE.Mesh(buildingGeom, buildingMat);
        building.position.set(
          (Math.random() - 0.5) * size * 0.8,
          buildingHeight / 2 + size * 0.15,
          (Math.random() - 0.5) * size * 0.8
        );
        cityGroup.add(building);
      }
      
      cityGroup.position.set(x, 60, z);
      return cityGroup;
    };

    // Eastern Sky Palace
    const skyPalace = createFloatingCity(50, -30, 12, 0x00ffff);
    scene.add(skyPalace);
    
    // Central Moon Palace
    const moonPalace = createFloatingCity(0, 0, 15, 0xc39bd3);
    scene.add(moonPalace);
    
    // Western Belt
    const belt = createFloatingCity(-40, 20, 10, 0xff7f50);
    scene.add(belt);

    // 3. Surface Layer (continents)
    // Eastern Continent
    const eastContinentGeometry = new THREE.BoxGeometry(80, 5, 60);
    const eastContinentMaterial = new THREE.MeshLambertMaterial({ color: 0xa9a9a9 }); // Dark gray for tech world
    const eastContinent = new THREE.Mesh(eastContinentGeometry, eastContinentMaterial);
    eastContinent.position.set(50, 2.5, 0);
    scene.add(eastContinent);

    // Central Islands
    const createIsland = (x, z, size, height, color) => {
      const islandGeometry = new THREE.CylinderGeometry(size, size * 1.2, height, 8);
      const islandMaterial = new THREE.MeshLambertMaterial({ color });
      const island = new THREE.Mesh(islandGeometry, islandMaterial);
      island.position.set(x, height / 2, z);
      return island;
    };

    // Magic Islands
    const magicIsland = createIsland(0, 0, 20, 8, 0x228b22); // Forest green
    scene.add(magicIsland);
    
    // Smugglers Islands
    const smugglersIsland = createIsland(0, 40, 15, 6, 0x8b4513); // Saddle brown
    scene.add(smugglersIsland);

    // Western Continent
    const westContinentGeometry = new THREE.BoxGeometry(70, 10, 60);
    const westContinentMaterial = new THREE.MeshLambertMaterial({ color: 0x8b0000 }); // Dark red for demon world
    const westContinent = new THREE.Mesh(westContinentGeometry, westContinentMaterial);
    westContinent.position.set(-55, 5, 0);
    scene.add(westContinent);

    // 4. Underground Layer
    // Create a wireframe to represent the underground caves
    const caveGeometry = new THREE.SphereGeometry(30, 8, 8);
    const caveMaterial = new THREE.MeshBasicMaterial({ 
      color: 0xffd700, // Gold for mines/caves
      wireframe: true,
      transparent: true,
      opacity: 0.3
    });
    const caveSystem = new THREE.Mesh(caveGeometry, caveMaterial);
    caveSystem.position.set(20, -20, 20);
    scene.add(caveSystem);

    // Eastern mines
    const mineGeometry = new THREE.SphereGeometry(15, 8, 8);
    const mineMaterial = new THREE.MeshBasicMaterial({ 
      color: 0x696969, // Dim gray for industrial mines
      wireframe: true,
      transparent: true,
      opacity: 0.3
    });
    const mineSystem = new THREE.Mesh(mineGeometry, mineMaterial);
    mineSystem.position.set(60, -15, -20);
    scene.add(mineSystem);

    // 5. Underwater Layer (Atlantis)
    const atlantisGeometry = new THREE.DodecahedronGeometry(15, 1);
    const atlantisMaterial = new THREE.MeshLambertMaterial({ 
      color: 0x40e0d0, // Turquoise
      transparent: true,
      opacity: 0.7
    });
    const atlantis = new THREE.Mesh(atlantisGeometry, atlantisMaterial);
    atlantis.position.set(0, -30, 20);
    scene.add(atlantis);

    // Add vertical connectors between layers
    const createVerticalConnector = (startX, startY, startZ, endX, endY, endZ, color) => {
      const points = [
        new THREE.Vector3(startX, startY, startZ),
        new THREE.Vector3(endX, endY, endZ)
      ];
      const geometry = new THREE.BufferGeometry().setFromPoints(points);
      const material = new THREE.LineBasicMaterial({ 
        color, 
        linewidth: 2,
        transparent: true,
        opacity: 0.7
      });
      return new THREE.Line(geometry, material);
    };

    // Add connectors
    const connectors = [
      // Space to Sky
      createVerticalConnector(50, 80, -30, 50, 60, -30, 0x00ffff), // East
      createVerticalConnector(0, 80, 0, 0, 60, 0, 0xc39bd3), // Central
      
      // Sky to Surface
      createVerticalConnector(50, 60, -30, 50, 5, -30, 0x00ffff), // East
      createVerticalConnector(0, 60, 0, 0, 4, 0, 0xc39bd3), // Central
      createVerticalConnector(-40, 60, 20, -40, 10, 20, 0xff7f50), // West
      
      // Surface to Underground
      createVerticalConnector(60, 5, -20, 60, -15, -20, 0x696969), // Eastern mines
      createVerticalConnector(0, 4, 40, 20, -20, 20, 0xffd700), // Cave system
      
      // Underground to Underwater
      createVerticalConnector(20, -20, 20, 0, -30, 20, 0x40e0d0) // To Atlantis
    ];
    
    connectors.forEach(connector => scene.add(connector));

    // Add grid helper for context
    const gridHelper = new THREE.GridHelper(200, 20, 0x000000, 0x000000);
    gridHelper.position.y = 0.1;
    gridHelper.material.opacity = 0.2;
    gridHelper.material.transparent = true;
    scene.add(gridHelper);

    // Add a legend to explain what each color represents
    // (The legend would be implemented in the React component UI)

    // Handle window resize
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener('resize', handleResize);

    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    // Cleanup function
    return () => {
      window.removeEventListener('resize', handleResize);
      mountRef.current.removeChild(renderer.domElement);
    };
  }, []);

  // Legend component to explain the different layers
  const Legend = () => (
    <div className="absolute bottom-4 left-4 bg-white bg-opacity-80 p-4 rounded shadow-md">
      <h3 className="text-lg font-bold mb-2">World Layers</h3>
      <ul className="text-sm">
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-gray-300 mr-2"></div>
          <span>Space Farms Layer (80 units)</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-cyan-300 mr-2"></div>
          <span>Sky Palace (Eastern)</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-purple-300 mr-2"></div>
          <span>Moon Palace (Central)</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-orange-300 mr-2"></div>
          <span>The Belt (Western)</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-gray-600 mr-2"></div>
          <span>Eastern Continent (Tech)</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-green-700 mr-2"></div>
          <span>Magic Islands (Central)</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-amber-800 mr-2"></div>
          <span>Smugglers Islands</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-red-900 mr-2"></div>
          <span>Western Continent (Otherworldly)</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-yellow-400 mr-2"></div>
          <span>Underground Caves</span>
        </li>
        <li className="flex items-center mb-1">
          <div className="w-4 h-4 bg-teal-400 mr-2"></div>
          <span>Atlantis (Underwater)</span>
        </li>
      </ul>
      <p className="text-xs mt-2">Use mouse to orbit. Scroll to zoom.</p>
    </div>
  );

  return (
    <div className="relative w-full h-screen">
      <div ref={mountRef} className="w-full h-full" />
      <Legend />
    </div>
  );
};

export default WorldLayersVisualization;